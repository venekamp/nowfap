---
- name: Include variables
  include_vars: "ldap.yml"
  tags: always

- name: Ensure that packages are installed
  apt:
    name: "{{ item }}"
    state: present
  with_items: "{{ packages  }}"
  become: Yes

- name: Starting slapd service
  service:
    name: slapd
    state: started

- name: Ensure the a number of directories exist
  become_user: "{{ remote_user }}"
  become: True
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ remote_user }}"
    group: "{{ remote_user }}"
    mode: 0755
  tags: ldap
  with_items:
    - "{{ directories }}"

- name: Copy schema2ldif
  become_user: "{{ remote_user }}"
  become: True
  copy:
    src: roles/ldap/files/schema2ldif
    dest: "{{ bin_dir }}/"
    mode: 0755

- name: Fetch the eduPerson schema
  become_user: "{{ remote_user }}"
  become: True
  get_url:
    url: "{{ eduPersonSchema_url }}"
    dest: "{{ downloads_dir }}"

- name: Fetch LdapPublicKey schema
  become_user: "{{ remote_user }}"
  become: true
  get_url:
    url: "{{ ldapPublicKeySchema_url }}"
    dest: "{{ ldap_schema_dir }}"

- name: Convert schema to ldif format
  become_user: "{{ remote_user }}"
  become: True
  command: "{{ bin_dir }}/schema2ldif {{ ldap_schema_dir }}/\
    {{ ldapPublicKey_schema }}"
  args:
    creates: "{{ ldap_schema_dir }}/{{ ldapPublicKey_ldif }}"

# Of course the unarchive module should be used here, but the things is,
# it seems broken in 2.2.0, although it should be fixed in 2.1.1. I
# guess porting the fix to 2.2.0 has been forgotten...
- name: Unzipping downloaded schema
  become_user: "{{ remote_user }}"
  become: True
  command: >
    unzip -o {{ downloads_dir }}/{{ eduPersonSchema_zip }} -d /tmp
  args:
    creates: "/tmp/{{ eduPersonSchema_ldif }}"
  tags:
    - skip_ansible_lint

# OpenLDAP does not like adding exisiting entries again. Only add the
# schema if it has not been added already. This does not yet take care
# of changes in the eduPerson schema.
- name: Copy the unpacked ldifs
  copy:
    src: /tmp/{{ eduPersonSchema_ldif }}
    dest: "{{ ldap_schema_dir }}/{{ eduPersonSchema_ldif }}"
    remote_src: True

- name: Check if eduPerson schema is already present
  shell: >
    ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:///
    -b 'cn=schema,cn=config' '(cn=*)' dn |
    grep 'cn={[0123456789]\+}eduperson,cn=schema,cn=config'
  failed_when: not [0, 1]
  register:
    eduPersonSchemaPresent
  tags:
    - skip_ansible_lint   # Suppres ansible-lint warning [ANSIBLE0012]

# Based on the success or failure of copying the eduPerson schema add
# the schema to the ldap database. Copying the same file in the previous
# task, would lead to not registering the edoPersonSchema variable.
- name: Ensure the eduPerson schema is added to LDAP
  command: >
    ldapadd -Q -Y EXTERNAL -H ldapi:/// -D "cn=config"
    -f {{ ldap_schema_dir }}/{{ eduPersonSchema_ldif }}
  when: eduPersonSchemaPresent.stdout == ""
  tags:
    - skip_ansible_lint   # Suppress ansible-lint warning [ANSIBLE0012]

- name: Check if the ldapPublicKey schema is already present
  shell: >
    ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:///
    -b 'cn=schema,cn=config' '(cn=*)' dn |
    grep 'cn={[0-9]\+}openssh-lpk-openldap,cn=schema,cn=config'
  failed_when: not [0, 1]
  register:
    ldapPublicKey
  tags:
    - skip_ansible_lint   # Suppress ansible-lint warning [ANSIBLE0012]

- name: Ensure the ldapPublicKey schema is added to LDAP
  command: >
    ldapadd -Q -Y EXTERNAL -H ldapi:/// -D "cn=config"
    -f "{{ ldap_schema_dir }}/{{ ldapPublicKey_ldif }}"
  when: ldapPublicKey.stdout == ""
  tags:
    - skip_ansible_lint   # Suppress ansible-lint warning [ANSIBLE0012]

- name: Generating password hash for LDAP admin
  command:
    slappasswd -h {SSHA} -s {{ ldap_admin_passwd }}
  register:
    ldap_root_hash
  tags:
    - skip_ansible_lint   # Suppress ansible-lint warning [ANSIBLE0012]

- name: Generate ldif from template
  become_user: "{{ remote_user }}"
  become: True
  template:
    src: "{{ item }}"
    dest: "{{ ldif_dir }}/{{ item | basename | \
           regex_replace('.j2', '') }}"
    mode: 0644
  with_fileglob:
    - ../templates/*.ldif.j2

- name: Create self-signed certificates
  include_role:
    name: certificate

- name: Copy ldap pub key
  copy:
    src: "{{ ca_certs_path }}/{{ ldap_server }}.pem"
    dest: /etc/ssl/certs/ldap.example.org.pem

- name: Copy private key
  copy:
    src: "{{ ca_private_path }}/{{ ldap_server }}.key"
    dest: /etc/ssl/private/ldap.example.org.key

- name: Create new Diffie Hellman parameters (takes a long time...)
  command: >
    openssl genpkey -genparam -algorithm DH -out /etc/ldap/dhparam.pem
            -pkeyopt dh_paramgen_prime_len:2048
  args:
    creates: /etc/ldap/dhparam.pem

- name: Configure LDAP to access ldaps:// only
  template:
    src: slapd.j2
    dest: /etc/default/slapd

- name: Starting slapd service
  service:
    name: slapd
    state: started

- name: Ensure the ldap admin credentials are set
  command: >
    ldapmodify -Q -Y EXTERNAL -H ldapi:///
    -f {{ ldif_dir }}/set_root_credentials.ldif
  tags:
    - skip_ansible_lint   # Suppress ansible-lint warning [ANSIBLE0012]

- name: Check if DIT has been created before
  command: >
    ldapsearch -Q -LLL -Y EXTERNAL -H ldapi:///
    -b "{{ ldap_basedn }}" "(ou=group)" dn
  register: emptyDIT
  failed_when: "emptyDIT.rc not in [0, 32]"
  tags:
    - skip_ansible_lint   # Suppress ansible-lint warning [ANSIBLE0012]

- name: Initialize DIT
  become_user: "{{ remote_user }}"
  become: True
  command: >
    ldapadd -c -x -D cn={{ ldap_admin }},{{ ldap_basedn }}
    -w {{ ldap_admin_passwd }} -f {{ ldif_dir }}/initial_setup.ldif
  register: result
  failed_when: "(result.rc not in [0, 68])"
  tags:
    - skip_ansible_lint   # Suppress ansible-lint warning [ANSIBLE0012]
  when: emptyDIT.stdout == ""

- name: Restart slapd
  service:
    name: slapd
    state: restarted

- name: Configure ldaps://
  command:
    ldapmodify -Q -Y EXTERNAL -H ldapi:///
    -f {{ ldif_dir }}/add_certificate.ldif
  tags:
    - skip_ansible_lint
